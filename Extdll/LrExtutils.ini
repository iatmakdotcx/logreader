#This syntax means that one of the level values (e.g. error, info, or
#debug) can be supplied followed by appender name(s) separated by commas.
#
#If one of the optional level values is given, the root level is set
#to the corresponding level. If no level value is specified,
#then the root level remains untouched.
#
#The root logger can be assigned multiple appenders.
#
#Each appenderName (separated by commas) will be added to the root logger.
#The named appender is defined using the appender syntax defined above.
#
#For non-root loggers the syntax is almost the same:
#
#log4d.logger.loggerName=[inherited|level],appenderName[,appenderName]...
#
#Thus, one of the usual level values can be optionally specified. For any
#of these values the named logger is assigned the corresponding level.
#In addition however, the value "inherited" can be optionally specified which
#means that named logger should inherit its level from the logger hierarchy.
#
#If no level value is supplied, then the level of the
#named logger remains untouched.
#
#By default loggers inherit their level from the hierarchy.
#However, if you set the level of a logger and later decide
#that that logger should inherit its level, then you should
#specify "inherited" as the value for the level value.
#
#Similar to the root logger syntax, each appenderName
#(separated by commas) will be attached to the named logger.
#
#Logger additivity is set in the following fashion:
#
#log4d.additive.loggerName=true
#
#ObjectRenderers
#
#You can customise the way message objects of a given type are converted to
#a string before being logged. This is done by specifying an object renderer
#for the object type would like to customise. The syntax is:
#
#log4d.renderer.nameOfRenderedClass=nameOfRenderingClass
#
#As in,
#
#log4d.renderer.TFruit=TFruitRenderer
#
#Class Factories
#
#In case you are using your own sub-types of the TLogLogger class and
#wish to use configuration files, then you must set the LoggerFactory
#for the sub-type that you are using. The syntax is:
#
#log4d.loggerFactory=nameOfLoggerFactoryClass
#
#Example
#
#An example configuration is given below.

# Set internal debugging
log4d.configDebug=true

# Global logging level - don't show debug events
# Off, Fatal, Error, Warn, Info, Debug, All
log4d.threshold=all

# Set logger factory - this is the default anyway
log4d.loggerFactory=TLogDefaultLoggerFactory

# Set root level to log warnings and above - sending to appender ODS
log4d.rootLogger=info,ODS

# Create root appender - logging to debugging output
log4d.appender.ODS=TLogODSAppender
## Using the simple layout, i.e. message only
log4d.appender.ODS.layout=TLogSimpleLayout
log4d.appender.ODS.errorHandler=
log4d.appender.ODS.dateFormat=
log4d.appender.ODS.threshold=
log4d.appender.ODS.filter=
log4d.appender.ODS.filter.1=
log4d.appender.ODS.filter.2=


# logging level
# inherited, Off, Fatal, Error, Warn, Info, Debug, All
log4d.logger.main=inherited,main
# Create a file appender
log4d.appender.main=TLogRDFAppender
log4d.appender.main.append=true
log4d.appender.main.logpath=./log_LrExtutils/
log4d.appender.main.errorHandler=
log4d.appender.main.layout=TLogPatternLayout
log4d.appender.main.layout.dateFormat=yyyy-MM-dd HH:nn:ss
#{ Compile the formatted string from the specified pattern and its parts.
#  Pattern characters are as follows:
#  c - Logger name, e.g. myapp.more
#  C - Class name of caller - not implemented
#  e - Message from the exception associated with the event
#  d - Current date and time, using date format set as option
#  F - File name of calling class - not implemented
#  l - Name and location within calling method - not implemented
#  L - Line number within calling method - not implemented
#  m - Message associated with event
#  M - Method name within calling class - not implemented
#  n - New line
#  p - Level name
#  r - Runtime in milliseconds since start
#  t - Thread id
#  x - Nested diagnostic context (NDC)
#  % - The percent character
#  Pattern characters are preceded by a percent sign (%) and may contain
#  field formatting characters per Delphi's Format function, e.g. %-7p
#  displays the event's level, left justified in a 7 character field.
#  Other text is displayed as is. }
log4d.appender.main.layout.pattern=%d >> %r [%t] %p %c %x - %m%n

# call parents loger
# д╛хо true
log4d.additive.main=true

# logging level
# inherited, Off, Fatal, Error, Warn, Info, Debug, All
log4d.logger.important=inherited,important
log4d.appender.important=TLogRDFAppender
log4d.appender.important.append=true
log4d.appender.important.logpath=d:/log_LrExtutils/important/
log4d.appender.important.errorHandler=
log4d.appender.important.layout=TLogPatternLayout
log4d.appender.important.layout.dateFormat=yyyy-MM-dd HH:nn:ss
log4d.appender.important.layout.pattern=%d >> %r [%t] %p %c %x - %m%n
log4d.additive.important=false

# logging level
# inherited, Off, Fatal, Error, Warn, Info, Debug, All
log4d.logger.data=inherited,data
log4d.appender.data=TLogRDFAppender
log4d.appender.data.append=true
log4d.appender.data.logpath=./log_LrExtutils/data/
log4d.appender.data.errorHandler=
log4d.appender.data.layout=TLogPatternLayout
log4d.appender.data.layout.dateFormat=yyyy-MM-dd HH:nn:ss
log4d.appender.data.layout.pattern=%d >> %r [%t] %p %c %x - %m%n
log4d.additive.data=false

# Nominate renderers - when objects of type TEdit are presented,
# use TComponentRenderer to display them
#log4d.renderer.TEdit=TComponentRenderer